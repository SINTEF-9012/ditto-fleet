"use strict";
/*!
 * Copyright (c) 2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestSender = void 0;
const response_1 = require("../../model/response");
/**
 * Handle to send requests.
 */
class RequestSender {
    /**
     * Fetches the specified request and returns an object of type T.
     *
     * @typeParam T - The type of object to return
     * @param options - The options to use for the request.
     * @returns A Promise for the specified object
     */
    fetchJsonRequest(options) {
        return this.fetchRequest(options)
            .then(response => options.parser(response.body));
    }
    /**
     * Fetches the specified request and returns an object of type T.
     *
     * @typeParam T - The type of object to return
     * @param options - The options to use for the request.
     * @returns A Promise for the specified object
     */
    fetchPutRequest(options) {
        return this.fetchRequest(options)
            .then(response => {
            if (response.status === 201) {
                return new response_1.PutResponse(options.parser(response.body), response.status, response.headers);
            }
            if (response.status === 204) {
                return new response_1.PutResponse(null, response.status, response.headers);
            }
            return Promise.reject(`Received unknown status code: ${response.status}`);
        });
    }
}
exports.RequestSender = RequestSender;
//# sourceMappingURL=request-sender.js.map