"use strict";
/*!
 * Copyright (c) 2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultDittoProtocolResponse = exports.DefaultDittoProtocolEnvelope = exports.ReservedDittoProtocolDittoHeaders = exports.Channel = exports.ApiVersion = void 0;
var ApiVersion;
(function (ApiVersion) {
    ApiVersion[ApiVersion["V2"] = 2] = "V2";
})(ApiVersion || (ApiVersion = {}));
exports.ApiVersion = ApiVersion;
var Channel;
(function (Channel) {
    Channel["twin"] = "twin";
    Channel["live"] = "live";
})(Channel || (Channel = {}));
exports.Channel = Channel;
/**
 * Known and reserved headers in Ditto.
 */
var ReservedDittoProtocolDittoHeaders;
(function (ReservedDittoProtocolDittoHeaders) {
    ReservedDittoProtocolDittoHeaders["CORRELATION_ID"] = "correlation-id";
})(ReservedDittoProtocolDittoHeaders || (ReservedDittoProtocolDittoHeaders = {}));
exports.ReservedDittoProtocolDittoHeaders = ReservedDittoProtocolDittoHeaders;
class DefaultDittoProtocolEnvelope {
    constructor(topic, headers, path, value, fields) {
        this.topic = topic;
        this.headers = headers;
        this.path = path;
        this.value = value;
        this.fields = fields;
    }
    toJson() {
        return JSON.stringify(this);
    }
}
exports.DefaultDittoProtocolEnvelope = DefaultDittoProtocolEnvelope;
class DefaultDittoProtocolResponse {
    constructor(topic, headers, path, value, status) {
        this.topic = topic;
        this.headers = headers;
        this.path = path;
        this.value = value;
        this.status = status;
    }
    static tryParseJson(json) {
        try {
            return JSON.parse(json);
        }
        catch (e) {
            console.error('Unable to parse json: ', json);
            return {};
        }
    }
    static fromJson(json) {
        const parsed = this.tryParseJson(json);
        return new DefaultDittoProtocolResponse(parsed['topic'], parsed['headers'] !== undefined ? parsed['headers'] : {}, parsed['path'], parsed['value'], parsed['status']);
    }
    correlationId() {
        if (this.headers !== undefined) {
            return this.headers[ReservedDittoProtocolDittoHeaders.CORRELATION_ID];
        }
    }
}
exports.DefaultDittoProtocolResponse = DefaultDittoProtocolResponse;
//# sourceMappingURL=ditto-protocol.js.map