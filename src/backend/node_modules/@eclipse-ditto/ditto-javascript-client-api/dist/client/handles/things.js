/*!
 * Copyright (c) 2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
import { Thing } from '../../model/things.model';
import { DefaultGetThingsOptions } from '../../options/request.options';
/**
 * Handle to send Things requests.
 */
export class DefaultThingsHandle {
    constructor(requestFactory) {
        this.requestFactory = requestFactory;
    }
    /**
     * returns an instance of DefaultThingsHandle using the provided RequestSender.
     *
     * @param builder - The builder for the RequestSender to work with.
     * @returns The DefaultThingsHandle
     */
    static getInstance(builder) {
        return new DefaultThingsHandle(builder.buildInstance('things'));
    }
    getThing(thingId, options) {
        return this.requestFactory.fetchJsonRequest({
            verb: 'GET',
            parser: Thing.fromObject,
            id: thingId,
            requestOptions: options
        });
    }
    getAttributes(thingId, options) {
        return this.requestFactory.fetchJsonRequest({
            verb: 'GET',
            parser: o => o,
            id: thingId,
            path: 'attributes',
            requestOptions: options
        });
    }
    getAttribute(thingId, attributePath, options) {
        return this.requestFactory.fetchJsonRequest({
            verb: 'GET',
            parser: o => o,
            id: thingId,
            path: `attributes/${attributePath}`,
            requestOptions: options
        });
    }
    getPolicyId(thingId, options) {
        return this.getStringAtPath(thingId, 'policyId', options);
    }
    getDefinition(thingId, options) {
        return this.getStringAtPath(thingId, 'definition', options);
    }
    deleteThing(thingId, options) {
        return this.requestFactory.fetchRequest({
            verb: 'DELETE',
            id: thingId,
            requestOptions: options
        });
    }
    deleteAttributes(thingId, options) {
        return this.deleteItemAtPath(thingId, 'attributes', options);
    }
    deleteAttribute(thingId, attributePath, options) {
        return this.deleteItemAtPath(thingId, `attributes/${attributePath}`, options);
    }
    deleteDefinition(thingId, options) {
        return this.deleteItemAtPath(thingId, 'definition', options);
    }
    getThings(thingIds, options) {
        let actualOptions;
        if (options === undefined) {
            actualOptions = DefaultGetThingsOptions.getInstance().setThingIds(thingIds);
        }
        else {
            actualOptions = options.setThingIds(thingIds);
        }
        return this.requestFactory.fetchJsonRequest({
            verb: 'GET',
            parser: o => Object(o).map((obj) => Thing.fromObject(obj)),
            requestOptions: actualOptions
        });
    }
    postThing(thingWithoutId) {
        return this.requestFactory.fetchJsonRequest({
            verb: 'POST',
            parser: Thing.fromObject,
            payload: thingWithoutId
        });
    }
    putThing(thing, options) {
        return this.changeThing('PUT', thing, options);
    }
    createThing(thing, options) {
        return this.changeThing('create', thing, options);
    }
    putAttributes(thingId, attributes, options) {
        return this.requestFactory.fetchPutRequest({
            verb: 'PUT',
            parser: o => o,
            id: thingId,
            path: 'attributes',
            requestOptions: options,
            payload: attributes
        });
    }
    putAttribute(thingId, attributePath, attributeValue, options) {
        return this.requestFactory.fetchPutRequest({
            verb: 'PUT',
            parser: o => o,
            id: thingId,
            path: `attributes/${attributePath}`,
            requestOptions: options,
            payload: attributeValue
        });
    }
    putPolicyId(thingId, policyId, options) {
        return this.requestFactory.fetchPutRequest({
            verb: 'PUT',
            parser: String,
            id: thingId,
            path: 'policyId',
            requestOptions: options,
            payload: policyId
        });
    }
    putDefinition(thingId, definition, options) {
        return this.requestFactory.fetchPutRequest({
            verb: 'PUT',
            parser: String,
            id: thingId,
            path: 'definition',
            requestOptions: options,
            payload: definition
        });
    }
    changeThing(verb, thing, options) {
        return this.requestFactory.fetchPutRequest({
            verb,
            parser: Thing.fromObject,
            id: thing.thingId,
            requestOptions: options,
            payload: thing.toObject()
        });
    }
    getStringAtPath(thingId, path, options) {
        return this.requestFactory.fetchJsonRequest({
            path,
            verb: 'GET',
            parser: String,
            id: thingId,
            requestOptions: options
        });
    }
    deleteItemAtPath(thingId, path, options) {
        return this.requestFactory.fetchRequest({
            path,
            verb: 'DELETE',
            id: thingId,
            requestOptions: options
        });
    }
}
//# sourceMappingURL=things.js.map